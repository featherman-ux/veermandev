---
import LanguageSwitcher from './LanguageSwitcher.astro';
import { getLangFromUrl } from '../i18n/utils';
import { ui, routes } from '../i18n/config';

const lang = getLangFromUrl(Astro.url);
const t = ui[lang];

// Navigation links
const navLinks = [
  { href: `/${lang}/${routes[lang].home}`, text: t['nav.home'] },
  { href: `/${lang}/${routes[lang].about}`, text: t['nav.about'] },
  { href: `/${lang}/${routes[lang].portfolio}`, text: t['nav.portfolio'] },
  { href: `/${lang}/${routes[lang].pricing}`, text: t['nav.pricing'] },
  { href: `/${lang}/${routes[lang].timeline}`, text: t['nav.timeline'] },
  { href: `/${lang}/${routes[lang].technology}`, text: t['nav.technology'] },
  { href: `/${lang}/${routes[lang].contact}`, text: t['nav.contact'] },
];

const currentPath = Astro.url.pathname;
---

<header class="h-20 bg-background-light dark:bg-background-dark sticky top-0 z-50 border-b border-gray-200 dark:border-gray-700 px-4 sm:px-6 lg:px-10">
  <div class="h-full flex items-center justify-between">
    <!-- Logo/Brand -->
    <a 
      href={`/${lang}/${routes[lang].home}`} 
      class="font-heading text-lg sm:text-xl lg:text-2xl font-bold text-text-light dark:text-text-dark tracking-wide hover:text-primary transition flex-shrink-0"
    >
      <span class="hidden sm:inline">Veerman</span><span class="sm:hidden">V</span><span class="text-primary">Development</span>
    </a>

    <!-- Desktop Navigation -->
    <nav class="hidden lg:flex items-center gap-6 xl:gap-8 h-full">
      {navLinks.map(link => (
        <a
          href={link.href}
          class:list={[
            "text-text-light dark:text-text-dark hover:text-primary transition relative pb-1 whitespace-nowrap text-sm xl:text-base",
            currentPath === link.href || currentPath === link.href + '/'
              ? "font-semibold after:absolute after:left-0 after:bottom-0 after:w-full after:h-0.5 after:bg-primary"
              : ""
          ]}
        >
          {link.text}
        </a>
      ))}

      <button 
        id="theme-toggler-desktop" 
        type="button" 
        aria-label="Toggle dark mode"
        class="p-2 rounded hover:bg-card-light dark:hover:bg-card-dark transition flex-shrink-0"
      >
        <span class="dark:hidden">üåô</span>
        <span class="hidden dark:inline">‚òÄÔ∏è</span>
      </button>

      <LanguageSwitcher />
    </nav>

    <!-- Mobile Navigation Controls -->
    <div class="lg:hidden flex items-center gap-2 sm:gap-4 h-full">
      <button 
        id="theme-toggler-mobile" 
        type="button" 
        aria-label="Toggle dark mode"
        class="p-2 rounded hover:bg-card-light dark:hover:bg-card-dark transition flex-shrink-0"
      >
        <span class="dark:hidden">üåô</span>
        <span class="hidden dark:inline">‚òÄÔ∏è</span>
      </button>

      <button
        id="mobile-menu-button"
        class="text-text-light dark:text-text-dark focus:outline-none p-2 flex-shrink-0"
        aria-expanded="false"
        aria-label="Toggle navigation"
      >
        ‚ò∞
      </button>
    </div>
  </div>

  <!-- Mobile Menu -->
  <div id="mobile-menu" class="hidden lg:hidden w-full bg-background-light dark:bg-background-dark border-t border-gray-200 dark:border-gray-700">
    <nav class="flex flex-col gap-4 px-4 sm:px-6 py-4 max-h-[70vh] overflow-y-auto">
      {navLinks.map(link => (
        <a
          href={link.href}
          class:list={[
            "text-text-light dark:text-text-dark hover:text-primary transition py-2 text-base",
            currentPath === link.href || currentPath === link.href + '/' ? "font-semibold border-l-4 pl-3 border-primary" : "pl-1"
          ]}
        >
          {link.text}
        </a>
      ))}
      <div class="pt-4 border-t border-gray-200 dark:border-gray-700">
        <LanguageSwitcher />
      </div>
    </nav>
  </div>

  <script type="module">
    if (typeof window !== 'undefined') {
      const init = () => {
        const menuButton = document.getElementById('mobile-menu-button');
        const mobileMenu = document.getElementById('mobile-menu');
        if (menuButton && mobileMenu) {
          menuButton.addEventListener('click', () => {
            const nowHidden = mobileMenu.classList.toggle('hidden');
            menuButton.setAttribute('aria-expanded', String(!nowHidden));
          });

          // Close mobile menu when clicking outside
          document.addEventListener('click', (e) => {
            if (!menuButton.contains(e.target) && !mobileMenu.contains(e.target)) {
              mobileMenu.classList.add('hidden');
              menuButton.setAttribute('aria-expanded', 'false');
            }
          });
        }

        const togglers = [
          document.getElementById('theme-toggler-desktop'),
          document.getElementById('theme-toggler-mobile'),
        ].filter(Boolean);

        togglers.forEach(btn => {
          btn.addEventListener('click', () => {
            const isDark = document.documentElement.classList.toggle('dark');
            try { localStorage.setItem('theme', isDark ? 'dark' : 'light'); } catch(e) {}
          });
        });
      };

      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init);
      } else {
        init();
      }
    }
  </script>
</header>
