---
import LanguageSwitcher from '../ui/LanguageSwitcher.astro';
import { getLangFromUrl, useTranslations, useTranslatedPath } from '../../i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const tp = useTranslatedPath(lang);

// Updated navigation to match your exact current file structure
const navLinks = [
  { href: tp('home'), text: t('nav.home') },
  { href: tp('services'), text: t('nav.services') },
  { href: tp('portfolio'), text: t('nav.portfolio') },
  { href: tp('process'), text: t('nav.process') },
  { href: tp('contact'), text: t('nav.contact') },
];
const currentPath = Astro.url.pathname;
---

<header class="h-16 sm:h-20 bg-background-light dark:bg-background-dark sticky top-0 z-50 border-b border-gray-200 dark:border-gray-700 shadow-sm">
  <div class="max-w-screen-2xl mx-auto px-3 sm:px-4 lg:px-8 h-full flex items-center justify-between">
    
    <!-- LOGO: single-line to keep header compact -->
    <div class="flex items-center min-w-0 flex-1 h-full">
      <a href={tp('home')} class="font-heading text-lg sm:text-xl lg:text-2xl font-bold text-text-light dark:text-text-dark tracking-wide hover:text-primary transition group min-w-0 whitespace-nowrap mr-6 lg:mr-8 leading-none flex items-center h-full">
        Veerman<span class="text-primary">Development</span>
      </a>
    </div>

    <!-- DESKTOP NAVIGATION -->
    <nav class="hidden xl:flex items-center gap-5 xl:gap-6 2xl:gap-8 h-full flex-nowrap ml-4 xl:ml-8">
      {navLinks.map(link => (
        <a
          href={link.href}
          class:list={[
            "text-sm xl:text-base text-text-light dark:text-text-dark hover:text-primary transition-all duration-200 relative pb-1 whitespace-nowrap font-medium",
            currentPath.startsWith(link.href)
              ? "text-primary font-semibold after:absolute after:left-0 after:bottom-0 after:w-full after:h-0.5 after:bg-primary"
              : "hover:after:absolute hover:after:left-0 hover:after:bottom-0 hover:after:w-full hover:after:h-0.5 hover:after:bg-primary/50"
          ]}
        >
          {link.text}
        </a>
      ))}

      <!-- CTA BUTTON -->
      <a
        href={tp('contact')}
        class="hidden 2xl:inline-block bg-primary text-white font-semibold px-5 py-2.5 rounded-lg hover:bg-primary/90 transition-all transform hover:scale-105 whitespace-nowrap shrink-0"
      >
        {t('nav.cta')}
      </a>

      <!-- THEME TOGGLE -->
      <button
        id="theme-toggler-desktop"
        type="button"
        aria-label="Toggle dark mode"
        class="p-2 rounded-lg hover:bg-card-light dark:hover:bg-card-dark transition-all shrink-0 flex items-center justify-center"
      >
        <span class="dark:hidden">üåô</span>
        <span class="hidden dark:inline">‚òÄÔ∏è</span>
      </button>

      <!-- LANGUAGE SWITCHER -->
      <div class="shrink-0"><LanguageSwitcher /></div>
    </nav>

    <!-- MOBILE MENU BUTTON -->
    <div class="xl:hidden flex items-center gap-2 sm:gap-3">
      <button
        id="theme-toggler-mobile"
        type="button"
        aria-label="Toggle dark mode"
        aria-pressed="false"
        class="p-2 rounded-lg hover:bg-card-light dark:hover:bg-card-dark transition-all touch-manipulation flex items-center justify-center"
      >
        <span class="dark:hidden text-lg" aria-hidden="true">üåô</span>
        <span class="hidden dark:inline text-lg" aria-hidden="true">‚òÄÔ∏è</span>
        <span class="sr-only">Toggle dark mode</span>
      </button>

      <button
        id="mobile-menu-button"
        class="text-text-light dark:text-text-dark focus:outline-none p-2 hover:bg-card-light dark:hover:bg-card-dark rounded-lg transition-all touch-manipulation flex items-center justify-center"
        aria-expanded="false"
        aria-controls="mobile-menu"
        aria-label="Toggle navigation menu"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
        <span class="sr-only">Toggle navigation menu</span>
      </button>
    </div>
  </div>

  <!-- MOBILE MENU -->
  <div id="mobile-menu" class="hidden xl:hidden bg-background-light dark:bg-background-dark border-t border-gray-200 dark:border-gray-700 shadow-lg" role="dialog" aria-modal="true">
    <nav class="max-w-7xl mx-auto px-3 sm:px-4 py-4 sm:py-6" aria-label="Mobile navigation">
      <div class="flex flex-col space-y-2 sm:space-y-3">
        {navLinks.map(link => (
          <a
            href={link.href}
            class:list={[
              "text-text-light dark:text-text-dark hover:text-primary transition-all py-3 px-4 rounded-lg text-base font-medium touch-manipulation",
              currentPath.startsWith(link.href) 
                ? "font-semibold bg-primary/10 text-primary border-l-4 border-primary" 
                : "hover:bg-card-light dark:hover:bg-card-dark active:bg-primary/5"
            ]}
          >
            {link.text}
          </a>
        ))}
        
        <!-- MOBILE CTA -->
          <a
            href={tp('contact')}
          class="bg-primary text-white font-semibold px-6 py-3 rounded-lg hover:bg-primary/90 transition-all text-center mt-4 touch-manipulation active:scale-95"
        >
          {t('nav.cta')}
        </a>
        
        <!-- MOBILE LANGUAGE SWITCHER -->
        <div class="pt-4 border-t border-gray-200 dark:border-gray-700">
          <LanguageSwitcher />
        </div>
      </div>
    </nav>
  </div>

  <script is:inline type="module">
    if (typeof window !== 'undefined') {
      const init = () => {
        const menuButton = document.getElementById('mobile-menu-button');
        const mobileMenu = document.getElementById('mobile-menu');
        let lastFocused = null;
        
        if (menuButton && mobileMenu) {
          menuButton.addEventListener('click', () => {
            const isHidden = mobileMenu.classList.contains('hidden');
            
            if (isHidden) {
              mobileMenu.classList.remove('hidden');
              mobileMenu.style.animation = 'slideDown 0.3s ease-out';
              menuButton.setAttribute('aria-expanded', 'true');
              lastFocused = document.activeElement;
              // Focus first link
              const firstLink = mobileMenu.querySelector('a, button');
              if (firstLink instanceof HTMLElement) firstLink.focus();
              // Basic focus trap
              const focusable = Array.from(mobileMenu.querySelectorAll('a, button')).filter(
                (element) => element instanceof HTMLElement
              );
              const first = focusable[0];
              const last = focusable[focusable.length - 1];
              mobileMenu.addEventListener('keydown', (e) => {
                if (e.key === 'Escape') {
                  closeMenu();
                }
                if (e.key === 'Tab') {
                  if (e.shiftKey && document.activeElement === first) {
                    e.preventDefault();
                    if (last) last.focus();
                  } else if (!e.shiftKey && document.activeElement === last) {
                    e.preventDefault();
                    if (first) first.focus();
                  }
                }
              });
            } else {
              closeMenu();
            }
          });
        }

        function closeMenu() {
          mobileMenu.style.animation = 'slideUp 0.3s ease-out';
          setTimeout(() => {
            mobileMenu.classList.add('hidden');
          }, 250);
          menuButton.setAttribute('aria-expanded', 'false');
          if (lastFocused instanceof HTMLElement) lastFocused.focus();
        }

        // Theme toggle functionality
        const togglers = [
          document.getElementById('theme-toggler-desktop'),
          document.getElementById('theme-toggler-mobile'),
        ].filter(Boolean);
        
        togglers.forEach(btn => {
          btn.addEventListener('click', () => {
            const isDark = document.documentElement.classList.toggle('dark');
            try { 
              localStorage.setItem('theme', isDark ? 'dark' : 'light'); 
            } catch(e) {
              console.warn('localStorage not available');
            }
          });
        });

        // Close mobile menu when clicking outside
        document.addEventListener('click', (e) => {
          if (!menuButton.contains(e.target) && !mobileMenu.contains(e.target)) {
            if (!mobileMenu.classList.contains('hidden')) closeMenu();
          }
        });
      };

      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init);
      } else {
        init();
      }
    }
  </script>

  <style>
    @keyframes slideDown {
      from {
        opacity: 0;
        transform: translateY(-10px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    @keyframes slideUp {
      from {
        opacity: 1;
        transform: translateY(0);
      }
      to {
        opacity: 0;
        transform: translateY(-10px);
      }
    }

    /* Smooth hover effects */
    nav a::after {
      transition: all 0.2s ease-out;
    }

    /* Mobile optimizations */
    @media (max-width: 640px) {
      .touch-manipulation {
        -webkit-tap-highlight-color: transparent;
        -webkit-touch-callout: none;
        -webkit-user-select: none;
        -khtml-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
      }
      
      /* Improve touch targets */
      button, a {
        min-height: 44px;
        min-width: 44px;
      }
      
      /* Better mobile menu spacing */
      #mobile-menu nav {
        padding-bottom: env(safe-area-inset-bottom, 1.5rem);
      }
    }

    /* Prevent zoom on input focus on iOS */
    @media screen and (-webkit-min-device-pixel-ratio: 0) {
      select, textarea, input[type="text"], input[type="password"], 
      input[type="datetime"], input[type="datetime-local"], 
      input[type="date"], input[type="month"], input[type="time"], 
      input[type="week"], input[type="number"], input[type="email"], 
      input[type="url"], input[type="search"], input[type="tel"], 
      input[type="color"] {
        font-size: 16px;
      }
    }
  </style>
</header>
