---
// src/layouts/BaseLayout.astro
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { getLangFromUrl } from '../i18n/utils';
import '../styles/global.css';

interface Props {
  title: string;
  description: string;
}

const { title, description }: Props = Astro.props;
const lang = getLangFromUrl(Astro.url);

const alternatePath = Astro.url.pathname.startsWith('/en') 
  ? Astro.url.pathname.replace('/en', '/nl')
  : Astro.url.pathname.replace('/nl', '/en');

const alternateUrl = Astro.site 
  ? new URL(alternatePath, Astro.site).href 
  : alternatePath;

const canonicalUrl = Astro.site 
  ? new URL(Astro.url.pathname, Astro.site).href 
  : Astro.url.pathname;
---
<!DOCTYPE html>
<html lang={lang} class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content={description} />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>

    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&family=Poppins:wght@600;700&display=swap" rel="stylesheet" />

    <link rel="canonical" href={canonicalUrl} />
    <link rel="alternate" hreflang={lang} href={canonicalUrl} />
    <link rel="alternate" hreflang={lang === 'nl' ? 'en' : 'nl'} href={alternateUrl} />
  </head>
  <body class="bg-background-light text-text-light dark:bg-background-dark dark:text-text-dark font-sans leading-relaxed">
    <Header />

    <!-- Balanced gap below sticky header -->
    <main id="main-content" class="min-h-screen px-4 md:px-8 pt-6 md:pt-8">
      <slot />
    </main>

    <Footer />

    <!-- Theme init (runs in browser only) -->
    <script type="module">
      if (typeof window !== 'undefined') {
        const applyTheme = (theme) => document.documentElement.classList.toggle('dark', theme === 'dark');

        try {
          const stored = localStorage.getItem('theme');
          if (stored) {
            applyTheme(stored);
          } else {
            applyTheme(window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
          }

          // Optional: update if system theme changes and user hasn't set a preference
          if (window.matchMedia) {
            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
              const stored = localStorage.getItem('theme');
              if (!stored) applyTheme(e.matches ? 'dark' : 'light');
            });
          }
        } catch (e) {
          // Fail silently if localStorage is blocked
        }
      }
    </script>
  </body>
</html>