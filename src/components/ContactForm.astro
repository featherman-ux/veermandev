---
import { ui } from '../i18n/ui';

const lang = 'en'; // Replace with dynamic detection if needed
const t = ui[lang] || ui['en'];
---

<form id="contact-form" class="bg-dark-slate rounded-2xl shadow-lg p-8 space-y-6 fade-in">
  <div>
    <label for="name" class="block text-sm font-medium text-subtle-gray">{t['contact.name']}</label>
    <input
      type="text"
      id="name"
      name="name"
      required
      placeholder={t['contact.namePlaceholder']}
      class="mt-2 block w-full rounded-lg bg-dark text-white border border-gray-600 focus:border-primary focus:ring-primary px-4 py-2"
    />
  </div>

  <div>
    <label for="email" class="block text-sm font-medium text-subtle-gray">{t['contact.email']}</label>
    <input
      type="email"
      id="email"
      name="email"
      required
      placeholder={t['contact.emailPlaceholder']}
      class="mt-2 block w-full rounded-lg bg-dark text-white border border-gray-600 focus:border-primary focus:ring-primary px-4 py-2"
    />
  </div>

  <div>
    <label for="message" class="block text-sm font-medium text-subtle-gray">{t['contact.message']}</label>
    <textarea
      id="message"
      name="message"
      rows="4"
      required
      placeholder={t['contact.messagePlaceholder']}
      class="mt-2 block w-full rounded-lg bg-dark text-white border border-gray-600 focus:border-primary focus:ring-primary px-4 py-2"
    ></textarea>
  </div>

  <div>
    <button
      type="submit"
      class="w-full flex justify-center py-3 px-6 rounded-lg text-lg font-heading font-semibold text-white bg-primary hover:bg-accent transition duration-300 shadow-md"
    >
      {t['contact.submit']}
    </button>
  </div>

  <div id="form-feedback" class="mt-2 text-sm"></div>
</form>

<script type="module" is:inline>
  const form = document.getElementById('contact-form');
  const feedback = document.getElementById('form-feedback');

  form?.addEventListener('submit', async (e) => {
    e.preventDefault();

    if (!form || !feedback) return;

    const formData = new FormData(form);
    feedback.textContent = 'Sending...';
    feedback.className = 'text-gray-300';

    try {
      // Use Astro actions if you have server actions set up
      const { data, error } = await window.actions?.contact?.(formData) ?? {};

      if (error) {
        if (error.fields) {
          // Display validation errors
          const messages = Object.values(error.fields).flat().join(' ');
          feedback.textContent = messages;
          feedback.className = 'text-red-500';
        } else {
          feedback.textContent = `Server error: ${error.message}`;
          feedback.className = 'text-red-500';
        }
        return;
      }

      if (data?.success) {
        feedback.textContent = data.message;
        feedback.className = 'text-green-500';
        form.reset();
      }
    } catch (err) {
      feedback.textContent = `Unexpected error: ${err}`;
      feedback.className = 'text-red-500';
    }
  });
</script>