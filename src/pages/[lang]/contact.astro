---
// src/pages/[lang]/contact.astro
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getLangFromUrl } from '../../i18n/utils';
import { ui } from '../../i18n/ui';

const lang = getLangFromUrl(Astro.url);
const t = ui[lang];
---
<BaseLayout title={t['contact.title']} description={t['contact.description']}>

  <!-- Main Section Container -->
  <section class="py-16 md:py-24 bg-background-light dark:bg-background-dark text-text-dark dark:text-text-light">
    <div class="container mx-auto px-4 sm:px-6 lg:px-8">

      <!-- Page Header -->
      <div class="text-center max-w-3xl mx-auto">
        <h1 class="font-heading text-4xl font-bold tracking-tight sm:text-5xl">{t['contact.mainHeading']}</h1>
        <p class="mt-4 text-lg text-gray-600 dark:text-gray-400">{t['contact.mainSubtitle']}</p>
      </div>

      <!-- =============================================================== -->
      <!-- SECTION 1: BOOK A CALL (Primary Call-to-Action)                -->
      <!-- =============================================================== -->
      <div class="mt-16 max-w-4xl mx-auto">
        <div class="text-center mb-8">
          <h2 class="font-heading text-3xl font-semibold">{t['meeting.title']}</h2>
          <p class="mt-2 text-gray-600 dark:text-gray-400">{t['meeting.description']}</p>
        </div>

        <div class="bg-card-light dark:bg-card-dark border border-gray-200 dark:border-gray-700 rounded-2xl shadow-lg">
          {/* FIX: De minimumhoogte is verhoogd om interne scrollbars te voorkomen. */}
          <div 
            class="calendly-inline-widget min-h-[800px]" 
            data-url="https://calendly.com/contact-veermandev/30min?hide_event_type_details=1&primary_color=0a84ff&hide_gdpr_banner=1"
          ></div>
          <script type="text/javascript" src="https://assets.calendly.com/assets/external/widget.js" async></script>
        </div>
      </div>

      <!-- Visual Separator -->
      <div class="relative my-20">
        <div class="absolute inset-0 flex items-center" aria-hidden="true">
          <div class="w-full border-t border-gray-300 dark:border-gray-700"></div>
        </div>
        <div class="relative flex justify-center">
          <span class="bg-background-light dark:bg-background-dark px-4 text-sm font-medium text-gray-500 dark:text-gray-400">OR</span>
        </div>
      </div>

      <!-- =============================================================== -->
      <!-- SECTION 2: CONTACT FORM (Secondary Call-to-Action)              -->
      <!-- =============================================================== -->
      <div class="max-w-lg mx-auto">
        <div class="text-center mb-8">
          <h2 class="font-heading text-3xl font-semibold">{t['contact.formTitle']}</h2>
          <p class="mt-2 text-gray-600 dark:text-gray-400">{t['contact.subtitle']}</p>
        </div>
        
        <form 
          id="contact-form"
          action="https://formspree.io/f/xdklqakn" 
          method="POST" 
          class="space-y-6"
          data-sending-text={t['form.sending']}
          data-error-text={t['form.error']}
        >
          <div>
            <label for="name" class="block mb-2 text-sm font-medium text-gray-700 dark:text-gray-300">{t['contact.name']}</label>
            <input type="text" id="name" name="name" placeholder={t['contact.namePlaceholder']} class="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-dark-slate text-gray-900 dark:text-white focus:ring-2 focus:ring-primary focus:border-transparent transition" required />
          </div>
          <div>
            <label for="email" class="block mb-2 text-sm font-medium text-gray-700 dark:text-gray-300">{t['contact.email']}</label>
            <input type="email" id="email" name="email" placeholder={t['contact.emailPlaceholder']} class="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-dark-slate text-gray-900 dark:text-white focus:ring-2 focus:ring-primary focus:border-transparent transition" required />
          </div>
          <div>
            <label for="message" class="block mb-2 text-sm font-medium text-gray-700 dark:text-gray-300">{t['contact.message']}</label>
            <textarea id="message" name="message" placeholder={t['contact.messagePlaceholder']} class="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-dark-slate text-gray-900 dark:text-white focus:ring-2 focus:ring-primary focus:border-transparent transition" rows="5" required ></textarea>
          </div>
          <button type="submit" class="w-full bg-primary text-white dark:text-dark font-semibold px-6 py-3 rounded-lg hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-background-light dark:focus:ring-offset-background-dark focus:ring-primary transition-colors">
            {t['contact.submit']}
          </button>
        </form>
        
        <div id="success-message" class="hidden text-center p-8 border border-green-500 bg-green-50 dark:bg-green-900/20 rounded-lg">
          <h3 class="font-heading text-2xl mb-2 text-green-800 dark:text-green-300">{t['form.successTitle']}</h3>
          <p class="text-gray-700 dark:text-gray-300">{t['form.successBody']}</p>
        </div>
      </div>
    </div>
  </section>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const form = document.getElementById('contact-form') as HTMLFormElement;
      const successMessage = document.getElementById('success-message');

      if (form && successMessage) {
        form.addEventListener('submit', function(e) {
          e.preventDefault();
          const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
          const originalButtonText = submitButton.innerHTML;
          
          const sendingText = form.dataset.sendingText || 'Sending...';
          const errorText = form.dataset.errorText || 'An error occurred.';
          
          submitButton.disabled = true;
          submitButton.innerHTML = sendingText;

          const formData = new FormData(form);
          
          fetch(form.action, {
            method: 'POST',
            body: formData,
            headers: {
                'Accept': 'application/json'
            }
          }).then(response => {
            if (response.ok) {
              form.style.display = 'none';
              successMessage.style.display = 'block';
            } else {
              response.json().then(data => {
                if (Object.hasOwn(data, 'errors')) {
                  alert(data["errors"].map((error: { message: string }) => error["message"]).join(", "));
                } else {
                  alert(errorText);
                }
              })
              submitButton.disabled = false;
              submitButton.innerHTML = originalButtonText;
            }
          }).catch((error: any) => {
            alert(errorText);
            submitButton.disabled = false;
            submitButton.innerHTML = originalButtonText;
          });
        });
      }
    });
  </script>
</BaseLayout>

