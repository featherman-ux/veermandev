---
import { ui, defaultLang } from '../i18n/ui';

const supportedLangs = Object.keys(ui);
const defaultRedirect = `/${defaultLang}/home`;
---
<!DOCTYPE html>
<html lang={defaultLang}>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Veerman Webdevelopment</title>
  </head>
  <body>
    <main style="display:flex;min-height:100vh;align-items:center;justify-content:center;flex-direction:column;gap:0.5rem;">
      <p>We sturen je meteen door naar de juiste taalversie.</p>
      <p><a href={defaultRedirect}>Ga verder naar de website</a></p>
    </main>
    <script
      is:inline
      data-supported-langs={JSON.stringify(supportedLangs)}
      data-default-path={defaultRedirect}
      data-default-lang={defaultLang}
    >
      (function () {
        const script = document.currentScript;
        if (!script) {
          return;
        }

        const supportedLangs = JSON.parse(script.dataset.supportedLangs || '[]');
        const defaultPath = script.dataset.defaultPath || '';
        const defaultLang = script.dataset.defaultLang || '';
        const storageKey = 'preferred_lang';

        const findSupportedLang = (value) => {
          if (!value) return null;
          const normalized = value.toLowerCase();
          return (
            supportedLangs.find(
              (lang) => normalized === lang || normalized.startsWith(lang + '-')
            ) || null
          );
        };

        const getStoredLang = () => {
          try {
            const stored = localStorage.getItem(storageKey);
            if (stored && supportedLangs.includes(stored)) {
              return stored;
            }
          } catch (error) {
            // Ignore storage errors (private browsing, etc.)
          }
          return null;
        };

        const getNavigatorLang = () => {
          const navigatorLangs = Array.isArray(navigator.languages) && navigator.languages.length
            ? navigator.languages
            : [navigator.language];
          for (const candidate of navigatorLangs) {
            const match = findSupportedLang(candidate);
            if (match) {
              return match;
            }
          }
          return null;
        };

        let targetLang = getStoredLang() || getNavigatorLang() || defaultLang || supportedLangs[0];

        if (!targetLang) {
          if (defaultPath && location.pathname !== defaultPath) {
            location.replace(defaultPath);
          }
          return;
        }

        try {
          localStorage.setItem(storageKey, targetLang);
        } catch (error) {
          // Silently ignore storage errors
        }

        const targetPath = `/${targetLang}/home`;

        if (targetPath && location.pathname !== targetPath) {
          location.replace(targetPath);
        }
      })();
    </script>
  </body>
</html>
