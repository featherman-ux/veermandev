---
import { useTranslatedPath } from '../i18n/utils';

const actionUrl = '/api/contact'; // or your Astro action URL
---

<form
  id="contact-form"
  action={actionUrl}
  method="POST"
  class="bg-dark-slate rounded-2xl shadow-lg p-8 space-y-6 fade-in"
>
  <div>
    <label for="name" class="block text-sm font-medium text-subtle-gray">
      Name
    </label>
    <input
      type="text"
      id="name"
      name="name"
      required
      placeholder="Your full name"
      class="mt-2 block w-full rounded-lg bg-dark text-white border border-gray-600 focus:border-primary focus:ring-primary px-4 py-2"
    />
  </div>

  <div>
    <label for="email" class="block text-sm font-medium text-subtle-gray">
      Email
    </label>
    <input
      type="email"
      id="email"
      name="email"
      required
      placeholder="you@example.com"
      class="mt-2 block w-full rounded-lg bg-dark text-white border border-gray-600 focus:border-primary focus:ring-primary px-4 py-2"
    />
  </div>

  <div>
    <label for="message" class="block text-sm font-medium text-subtle-gray">
      Message
    </label>
    <textarea
      id="message"
      name="message"
      rows="4"
      required
      placeholder="Write your message here..."
      class="mt-2 block w-full rounded-lg bg-dark text-white border border-gray-600 focus:border-primary focus:ring-primary px-4 py-2"
    ></textarea>
  </div>

  <div>
    <button
      type="submit"
      class="w-full flex justify-center py-3 px-6 rounded-lg text-lg font-heading font-semibold text-white bg-primary hover:bg-accent transition duration-300 shadow-md"
    >
      Send Message
    </button>
  </div>

  <div id="form-feedback" class="mt-2 text-sm"></div>
</form>

<script type="module" is:inline>
  const form = document.getElementById('contact-form');
  const feedback = document.getElementById('form-feedback');

  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    if (!form || !feedback) return;

    feedback.textContent = 'Sending...';
    feedback.className = 'text-gray-300';

    try {
      const formData = new FormData(form);
      // Replace this with your Astro server action or fetch call
      const res = await fetch(form.action, {
        method: 'POST',
        body: formData,
        headers: { 'Accept': 'application/json' },
      });
      const result = await res.json();

      if (!res.ok) {
        const msg = result.errors?.join(' ') || result.message || 'Server error';
        feedback.textContent = msg;
        feedback.className = 'text-red-500';
      } else {
        feedback.textContent = result.message || 'Message sent!';
        feedback.className = 'text-green-500';
        form.reset();
      }
    } catch (err) {
      feedback.textContent = `Unexpected error: ${err}`;
      feedback.className = 'text-red-500';
    }
  });
</script>
