---
import { languages, routes } from '../../i18n/ui';
import { getLangFromUrl } from '../../i18n/utils';

const { pathname } = Astro.url;
const lang = getLangFromUrl(Astro.url);

const pathSegments = pathname.split('/').filter(Boolean);
const currentSegments = pathSegments[0] === lang ? pathSegments.slice(1) : pathSegments;
const [currentSlug = 'home', ...remainingSegments] = currentSegments;
const currentLangRoutes = routes[lang as keyof typeof routes] as Record<string, string> | undefined;

// Match the current URL slug to its canonical route key so we can translate it reliably.
const canonicalRoute =
  Object.entries(currentLangRoutes ?? {}).find(([, value]) => value === currentSlug)?.[0] || currentSlug || 'home';

const remainingPath = remainingSegments.join('/');

function getTranslatedPath(targetLang: string, routeKey: string) {
  const targetRoutes = routes[targetLang as keyof typeof routes] as Record<string, string> | undefined;
  const translatedSlug = targetRoutes?.[routeKey] || routeKey;
  const basePath = `/${targetLang}/${translatedSlug}`;
  return remainingPath ? `${basePath}/${remainingPath}` : basePath;
}

const languageOptions = Object.entries(languages).filter(([code]) => code !== lang);
---

<div class="language-switcher">
  {languageOptions.map(([langCode, label]) => (
    <a 
      href={getTranslatedPath(langCode, canonicalRoute)}
      class="lang-link"
      aria-label={`Switch to ${label}`}
      data-lang-code={langCode}
    >
      {label}
    </a>
  ))}
</div>

<style>
  .language-switcher {
    display: flex;
    gap: 0.25rem;
  }
  
  .lang-link {
    text-decoration: none;
    color: var(--color-text-muted, #6b7280);
    padding: 0.125rem 0.4rem;
    border-radius: 4px;
    border: 1px solid rgba(148, 163, 184, 0.4);
    font-size: 0.75rem;
    line-height: 1;
    transition: all 0.2s ease;
  }
  
  .lang-link:hover {
    background-color: var(--color-primary-light, rgba(59, 130, 246, 0.15));
    color: var(--color-primary, #0a84ff);
    border-color: var(--color-primary, #0a84ff);
  }
</style>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const links = document.querySelectorAll('.language-switcher [data-lang-code]');
    links.forEach((link) => {
      if (!(link instanceof HTMLElement)) return;
      link.addEventListener('click', () => {
        const langCode = link.getAttribute('data-lang-code');
        if (!langCode) return;
        try {
          localStorage.setItem('preferred_lang', langCode);
        } catch (error) {
          // Ignore storage errors
        }
      });
    });
  });
</script>
